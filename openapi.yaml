openapi: 3.0.4
info:
  title: impostors.space Backend Interface
  description: >-
    This API allows impostors.space and other applications to communicate with
    the impostors.net backend server
  termsOfService: https://impostors.space/terms
  contact:
    email: api@impostors.space
  version: 0.0.1
servers:
  - url: https://impostors.space/api/v1
  - url: https://impostors.api.pauljako.de/api/v1
tags:
  - name: user
    description: Get information about users.
  - name: post
    description: Get and create posts.
  - name: comment
    description: Get information about and create comments.
  - name: auth
    description: Manage users
paths:
  /post/list/recent:
    get:
      operationId: api.post.list_recent
      tags:
      - post
      parameters:
      - name: count
        in: query
        description: "The maximum number of posts to return. NOTE: If there are less posts available than the specified count, all available posts will be returned. The remaining elements will NOT be filled with null values."
        required: false
        schema:
          type: integer
          default: 10
          minimum: 1
          maximum: 100
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /post/random:
    options:
      operationId: api.cors.post_next_options
      security: []
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
    get:
      operationId: api.post.random
      tags:
      - post
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '401':
          description: Unauthorized
        '302':
          description: Redirect
          headers:
            Location:
              description: The location to redirect to. If your HTTP client does not support redirects, construct this URI using the response body.
              example: https://impostors.space/post/3fa85f64-5717-4562-b3fc-2c963f66afa6
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    format: uuid
        '404':
          description: "Not Found: No posts available"
        '500':
          description: Internal Server Error
    summary: Get the next post from your feed

  /post/{uuid}:
    options:
      operationId: api.cors.post_uuid_options
      security: []
      parameters:
      - name: uuid
        in: path
        description: The UUID of the post to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
    get:
      operationId: api.post.fetch
      parameters:
      - name: uuid
        in: path
        description: The UUID of the post to fetch
        required: true
        schema:
          type: string
          format: uuid
      tags:
      - post
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      operationId: api.post.delete
      parameters:
      - name: uuid
        in: path
        description: The UUID of the post to delete
        required: true
        schema:
          type: string
          format: uuid
      tags:
      - post
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /post:
    options:
      operationId: api.cors.post_options
      security: []
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Bad Request (check request body)
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    post:
      operationId: api.post.create
      tags:
      - post
      requestBody:
        required: true
        description: The post content
        content:
          text/markdown:
            schema:
              type: string
              format: markdown
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /user/{uuid}:
    options:
      operationId: api.cors.user_uuid_options
      security: []
      parameters:
      - name: uuid
        in: path
        description: The UUID of the user to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
    get:
      operationId: api.user.fetch_by_uuid
      tags:
      - user
      parameters:
      - name: uuid
        in: path
        description: The UUID of the user to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  posts:
                    type: array
                    items:
                      type: string
                      format: uuid
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /post/{uuid}/comment:
    options:
      operationId: api.cors.post_comment_options
      security: []
      parameters:
      - name: uuid
        in: path
        description: The UUID of the post to attach the comment to
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
    post:
      operationId: api.comment.create
      tags:
      - comment
      parameters:
      - name: uuid
        in: path
        description: The UUID of the post to attach the comment to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        description: The comment content
        content:
          text/markdown:
            schema:
              type: string
              format: markdown
          text/plain:
            schema:
              type: string
      responses:
        '200':
            description: Created
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /comment/{uuid}:
    options:
      operationId: api.cors.comment_uuid_options
      security: []
      parameters:
      - name: uuid
        in: path
        description: The UUID of the comment to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
    get:
      operationId: api.comment.fetch
      tags:
      - comment
      parameters:
      - name: uuid
        in: path
        description: The UUID of the comment to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      operationId: api.comment.delete
      tags:
      - comment
      parameters:
      - name: uuid
        in: path
        description: The UUID of the comment to delete
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /comment/{uuid}/vote:
    options:
      operationId: api.cors.comment_vote_options
      security: []
      parameters:
      - name: uuid
        in: path
        description: The UUID of the comment to vote for
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
    put:
      operationId: api.comment.put_vote
      tags:
      - comment
      parameters:
      - name: uuid
        in: path
        description: The UUID of the comment to vote for
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The vote action, either -1, 0 or 1
        required: true
        content:
          application/json:
            schema:
              type: integer
              enum:
              - -1
              - 0
              - +1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '409':
          $ref: "#/components/responses/votingConflict"
        '500':
          description: Internal Server Error
  /auth/signup:
    options:
      operationId: api.cors.auth_signup_options
      security: []
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
    put:
      operationId: api.auth.signup
      tags:
      - auth
      security: []
      parameters:
      - name: displayName
        in: query
        description: The display name of the user to create
        required: true
        schema:
          type: string
      - name: handle
        in: query
        description: The unique handle of the new user
        required: true
        schema:
          type: string
      - name: passwordHash
        in: query
        description: The SHA256 password hash of the user to create
        required: true
        schema:
          type: string
          format: sha256
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad Request (check request parameters)'
        '409':
          description: "Conflict: A user with the specified handle already exists"
        '500':
          description: Internal Server Error
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: "auth.basic_auth"
  schemas:
    Post:
      type: object
      properties:
        responseType:
          type: string
          enum:
          - impostor
          - innocent
          - author
        uuid:
          type: string
          format: uuid
        content:
          type: string
          format: markdown
          nullable: true
          example: null
        author:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
        comments:
          type: array
          nullable: true
          items:
            type: string
            format: uuid
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        displayName:
          type: string
          example: "Red Crewmate"
        handle:
          type: string
          example: "rednotsus"
    Comment:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        content:
          type: string
          format: markdown
        post:
          type: string
          format: uuid
        author:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
        score:
          type: integer
          example: 12
        yourVote:
          type: integer
          enum:
          - -1
          - 0
          - +1
          example: 0
  responses:
    votingConflict:
      description: Conflict
      content:
        application/json:
          schema:
            type: string
            enum:
            - ownComment
            - alreadyVoted
security:
- basicAuth: []